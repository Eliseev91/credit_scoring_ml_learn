from prepare_data import load_and_prepare_data
from sklearn.metrics import classification_report, confusion_matrix
from xgboost import XGBClassifier
from imblearn.over_sampling import SMOTE

# 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
X_train, X_test, y_train, y_test = load_and_prepare_data()

# 2. –ü—Ä–∏–º–µ–Ω—è–µ–º SMOTE —Ç–æ–ª—å–∫–æ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º –¥–∞–Ω–Ω—ã–º
smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)

print(f"–î–æ SMOTE: {y_train.value_counts().to_dict()}")
print(f"–ü–æ—Å–ª–µ SMOTE: {y_train_res.value_counts().to_dict()}")

# 3. –û–±—É—á–∞–µ–º XGBoost –Ω–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
xgb_model = XGBClassifier(
    n_estimators=100,
    max_depth=3,
    learning_rate=0.1,
    use_label_encoder=False,
    eval_metric='logloss',
    random_state=42
)
xgb_model.fit(X_train_res, y_train_res)

# 4. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
y_pred = xgb_model.predict(X_test)

# 5. –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
print("üìä XGBoost + SMOTE ‚Äî –û—Ç—á—ë—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
print(classification_report(y_test, y_pred))
print("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫:\n", confusion_matrix(y_test, y_pred))